# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Quarkslab
# This file is distributed under the same license as the tritondse package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tritondse \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-21 22:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../api/configuration.rst:4
msgid "Configuration"
msgstr ""

#: of tritondse.config.Config:1
msgid "Data class holding tritondse configuration parameter"
msgstr "Class de données contenant les paramètres de configuration de tritondse"

#: of tritondse.config.Config tritondse.config.Config.from_file
#: tritondse.config.Config.from_json tritondse.config.Config.to_file
msgid "Parameters"
msgstr "Paramètres"

#: of tritondse.config.Config:4
msgid "Enable debugging logging"
msgstr "Active le logging de debug"

#: ../../docstring of tritondse.Config.branch_solving_strategy:1
msgid ""
"Branch solving strategy to apply for a single execution. For a given non-"
"covered branch allows changing whether we try to solve it at all "
"occurences or more seldomly. default: "
":py:obj:`BranchCheckStrategy.FIRST_LAST_NOT_COVERED`"
msgstr ""
"Stratégie de résolution des branches lors d'une seule exécution. Pour une branche "
"non-couverte donnée, cela permet de configurer si le moteur essaye de résoudre toutes "
"les occurrences de cette branche ou alors le faire de manière moins récurrente. Valeur par défaut: "
":py:obj:`BranchCheckStrategy.FIRST_LAST_NOT_COVERED`"


#: ../../docstring of tritondse.Config.coverage_strategy:1
msgid ""
"Coverage strategy to apply for the whole exploration, default: "
":py:obj:`CoverageStrategy.CODE_COVERAGE`"
msgstr ""
"Stratégie de couverture à appliquer pour toute l'exploration. Valeur par défaut: "
":py:obj:`CoverageStrategy.CODE_COVERAGE`"

#: ../../docstring of tritondse.Config.debug:1
msgid ""
"Enable debug logging or not. Value taken from constructor. FIXME: What if"
" the value is changed during execution ?"
msgstr ""
"Active le logging de debug ou non. La valeur est récupérée du constructeur."

#: ../../docstring of tritondse.Config.execution_timeout:1
msgid ""
"Timeout of a single execution. If it is triggered the associated input "
"file is marked as 'hanging'. In seconds, 0 means unlimited *(default: 0)*"
msgstr ""
"Timeout d'une seule exécution. S'il est activé l'entrée est marquée comme 'hanging'. "
"En secondes, 0 signifie illimité *(défaut: 0)*"

#: ../../docstring of tritondse.Config.exploration_limit:1
msgid "Number of execution iterations. 0 means unlimited *(default: 0)*"
msgstr ""
"Nombre d'itérations d'exécutions. 0 signifie illimité *(défaut: 0)*"

#: ../../docstring of tritondse.Config.exploration_timeout:1
msgid ""
"Overall timeout of the exploration in seconds. 0 means unlimited "
"*(default: 0)*"
msgstr ""
"Timeout global de l'exploration en secondes. 0 signifie illimité *(défaut: 0)*"

#: of tritondse.config.Config.from_file:1
msgid "Load a configuration from a file to a new instance of Config"
msgstr "Charge une configuration d'un fichier en une instance de Config"

#: of tritondse.config.Config.from_file:3 tritondse.config.Config.to_file:3
msgid "The path name"
msgstr "Chemin"

#: of tritondse.config.Config.from_file tritondse.config.Config.from_json
#: tritondse.config.Config.to_json
msgid "Returns"
msgstr "Renvoie"

#: of tritondse.config.Config.from_file:4 tritondse.config.Config.from_json:4
msgid "A fresh instance of Config"
msgstr "Nouvelle instance de Config"

#: of tritondse.config.Config.from_json:1
msgid "Load a configuration from a json input to a new instance of Config"
msgstr "Charge une configuration à partir d'un fichier JSON en une nouvelle instance de Config"

#: of tritondse.config.Config.from_json:3
msgid "The JSON text"
msgstr "Le texte JSON"

#: ../../docstring of tritondse.Config.pipe_stderr:1
msgid "Pipe the program stderr to Python's stderr *(default: False)*"
msgstr "Pipe le 'stderr' du programme dans celui de Python *(défaut: False)*"

#: ../../docstring of tritondse.Config.pipe_stdout:1
msgid "Pipe the program stdout to Python's stdout. *(default: False)*"
msgstr "Pipe le 'stdout' du programme dans celui de Python *(défaut: False)*"

#: ../../docstring of tritondse.Config.program_argv:1
msgid "Concrete program argument as given on the command line."
msgstr "Arguments à donner en ``argv`` du programme."

#: ../../docstring of tritondse.Config.skip_sleep_routine:1
msgid "Whether to emulate sleeps routine or not *(default: False)*"
msgstr "Soit émuler la routine sleep *(avec un vrai sleep) ou non *(défaut: False)*"

#: ../../docstring of tritondse.Config.smt_queries_limit:1
msgid "Limit of SMT queries to perform for a single execution *(default: 1200)*"
msgstr "Limite de requêtes SMT à effectuer pour une seule exécution *(défaut: 1200)*"

#: ../../docstring of tritondse.Config.smt_timeout:1
msgid "Timeout for a single SMT query in milliseconds *(default: 10)*"
msgstr "Timeout pour une seule requête SMT en milliseconds *(defaut: 10)*"

#: ../../docstring of tritondse.Config.symbolize_argv:1
msgid ""
"Symbolize parameters given on the command line. They are then injected on"
" the libc_start_main function call. *(default: False)*"
msgstr "Symbolise les paramètres sur la ligne de commande (``argv``). Ils sont alors "
"injectés lors de l'appel à ``libc_start_main``. *(défaut: False)*"

#: ../../docstring of tritondse.Config.symbolize_stdin:1
msgid ""
"Symbolize reads on ``stdin``. Thus the content of a buffer read in the "
"file descriptor 0 will be symbolized. *(default: False)*"
msgstr ""
"Symbolise les lectures sur ``stdin``. Le contenu du buffer lu issu "
"du *file descriptor* 0 sera symbolisé. *(défaut: False)*"

#: ../../docstring of tritondse.Config.symbolize_stdin:4
msgid ""
"At the moment it is incompatible with "
":py:obj:`tritondse.Config.symbolize_argv` as a single symbolization point"
" is supported at the moment"
msgstr ""
"Pour le moment c'est incompatible avec :py:obj:`tritondse.Config.symbolize_argv` car un "
"seul point d'injection d'une entrée est supporté"

#: ../../docstring of tritondse.Config.thread_scheduling:1
msgid ""
"Number of instructions to execute before switching to the next thread. At"
" the moment all threads are scheduled in a round-robin manner *(default: "
"200)*"
msgstr ""
"Nombre d'instructions à exécuter avant de programmer un nouveau thread pour exécution. Pour "
"le moment les threads sont programmés de manière cyclique avec un algorithme de round-robin *(défaut: 200)*."

#: ../../docstring of tritondse.Config.time_inc_coefficient:1
msgid ""
"Time increment coefficient at each instruction to provide a deterministic"
" behavior when calling time functions (e.g gettimeofday(), "
"clock_gettime(), ...). For example, if 0.0001 is defined, each "
"instruction will increment the time representation of the execution by "
"100us. *(default: 0.00001)*"
msgstr ""
"Coefficient d'incrémentation du temps pour chaque instruction exécutée. Cela permet "
"d'obtenir un comportement déterministe lors d'un appel à une fonction tel que ``gettimeofday()``, etc. "
"Par exemple, si 0.0001 est défini, chaque instruction exécutée va incrémenter la représentation de "
"l'écoulement du temps de 100us. *(défaut: 0.00001)*"

#: of tritondse.config.Config.to_file:1
msgid "Save the current configuration to a file"
msgstr "Sauvegarde la configuration courante dans le fichier"

#: of tritondse.config.Config.to_json:1
msgid "Convert the current configuration to a json output"
msgstr "Converti la configuration en JSON"

#: of tritondse.config.Config.to_json:3
msgid "JSON text"
msgstr "texte JSON"

#: ../../docstring of tritondse.Config.workspace:1
msgid "Workspace directory to use. *(default: 'workspace')*"
msgstr "Dossier de workspace à utiliser *(défaut: 'workspace')*"

