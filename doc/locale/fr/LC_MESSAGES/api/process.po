# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Quarkslab
# This file is distributed under the same license as the tritondse package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tritondse \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-21 22:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../api/process.rst:3
msgid "ProcessState"
msgstr ""

#: of tritondse.process_state.ProcessState:1
msgid ""
"Current process state. This class keeps all the runtime related to a "
"running process, namely current, instruction, thread, memory maps, file "
"descriptors etc. It also wraps Triton execution and thus hold its "
"context. At the top of this, it provides a user-friendly API to access "
"data in both the concrete and symbolic state of Triton."
msgstr ""
"Process courant. Cette classe conserve tous les données liées à l'exécution du process comme "
"l'instruction courante, le thread, le mapping mémoire, les descripteurs de fichiers etc. Elle "
"encapsule aussi le contexte Triton au dessus duquel, elle fournie une API simple d'utilisation "
"pour accéder aux données de l'état concrêt et symbolique."

#: of tritondse.heap_allocator.HeapAllocator
#: tritondse.heap_allocator.HeapAllocator.alloc
#: tritondse.heap_allocator.HeapAllocator.free
#: tritondse.heap_allocator.HeapAllocator.is_ptr_allocated
#: tritondse.heap_allocator.HeapAllocator.is_ptr_freed
#: tritondse.process_state.ProcessState
#: tritondse.process_state.ProcessState.concretize_argument
#: tritondse.process_state.ProcessState.concretize_memory_bytes
#: tritondse.process_state.ProcessState.concretize_memory_int
#: tritondse.process_state.ProcessState.concretize_register
#: tritondse.process_state.ProcessState.get_argument_symbolic
#: tritondse.process_state.ProcessState.get_argument_value
#: tritondse.process_state.ProcessState.get_format_arguments
#: tritondse.process_state.ProcessState.get_format_string
#: tritondse.process_state.ProcessState.get_stack_value
#: tritondse.process_state.ProcessState.get_string_argument
#: tritondse.process_state.ProcessState.initialize_context
#: tritondse.process_state.ProcessState.is_heap_ptr
#: tritondse.process_state.ProcessState.is_memory_symbolic
#: tritondse.process_state.ProcessState.is_stack_ptr
#: tritondse.process_state.ProcessState.is_valid_memory_mapping
#: tritondse.process_state.ProcessState.load_program
#: tritondse.process_state.ProcessState.process_instruction
#: tritondse.process_state.ProcessState.push_constraint
#: tritondse.process_state.ProcessState.push_stack_value
#: tritondse.process_state.ProcessState.read_memory_bytes
#: tritondse.process_state.ProcessState.read_memory_int
#: tritondse.process_state.ProcessState.read_memory_ptr
#: tritondse.process_state.ProcessState.read_register
#: tritondse.process_state.ProcessState.read_symbolic_memory_byte
#: tritondse.process_state.ProcessState.read_symbolic_memory_bytes
#: tritondse.process_state.ProcessState.read_symbolic_memory_int
#: tritondse.process_state.ProcessState.read_symbolic_register
#: tritondse.process_state.ProcessState.register_triton_callback
#: tritondse.process_state.ProcessState.write_memory_byte
#: tritondse.process_state.ProcessState.write_memory_bytes
#: tritondse.process_state.ProcessState.write_memory_int
#: tritondse.process_state.ProcessState.write_memory_ptr
#: tritondse.process_state.ProcessState.write_register
#: tritondse.process_state.ProcessState.write_symbolic_memory_byte
#: tritondse.process_state.ProcessState.write_symbolic_memory_int
#: tritondse.process_state.ProcessState.write_symbolic_register
#: tritondse.thread_context.ThreadContext
#: tritondse.thread_context.ThreadContext.restore
#: tritondse.thread_context.ThreadContext.save
msgid "Parameters"
msgstr "Paramètres"

#: of tritondse.process_state.ProcessState:7
#: tritondse.thread_context.ThreadContext:7
msgid "Thread scheduling value, see :py:attr:`tritondse.Config.thread_scheduling`"
msgstr "Nombre d'instruction à exécuter par thread, voir :py:attr:`tritondse.Config.thread_scheduling`"

#: of tritondse.process_state.ProcessState:8
msgid ""
"Time coefficient to represent execution time of an instruction see: "
":py:attr:`tritondse.Config.time_inc_coefficient`"
msgstr ""
"Coefficient d'accroissement du temps. Dis autrement temps d'exécution de chaque instructions "
"voir :py:attr:`tritondse.Config.time_inc_coefficient`"

#: of tritondse.ProcessState.architecture:1
msgid "Architecture of the current process state"
msgstr "Architecture du process courant"

#: of tritondse.ProcessState.architecture
#: tritondse.ProcessState.base_pointer_register
#: tritondse.ProcessState.current_instruction
#: tritondse.ProcessState.last_branch_constraint
#: tritondse.ProcessState.minus_one
#: tritondse.ProcessState.program_counter_register
#: tritondse.ProcessState.ptr_bit_size tritondse.ProcessState.ptr_size
#: tritondse.ProcessState.registers tritondse.ProcessState.return_register
#: tritondse.ProcessState.stack_pointer_register
#: tritondse.arch.CpuState.program_counter
#: tritondse.heap_allocator.HeapAllocator.alloc
#: tritondse.process_state.ProcessState.get_argument_symbolic
#: tritondse.process_state.ProcessState.get_argument_value
#: tritondse.process_state.ProcessState.get_format_arguments
#: tritondse.process_state.ProcessState.get_format_string
#: tritondse.process_state.ProcessState.get_memory_string
#: tritondse.process_state.ProcessState.get_stack_value
#: tritondse.process_state.ProcessState.get_string_argument
#: tritondse.process_state.ProcessState.read_memory_bytes
#: tritondse.process_state.ProcessState.read_symbolic_memory_byte
#: tritondse.process_state.ProcessState.read_symbolic_memory_bytes
#: tritondse.process_state.ProcessState.read_symbolic_memory_int
#: tritondse.process_state.ProcessState.read_symbolic_register
msgid "Return type"
msgstr "Type de retour"

#: of tritondse.ProcessState.base_pointer_register:1
msgid "Return the appropriate base pointer register according to the arch."
msgstr "Renvoi, le registre de 'base pointer' selon l'architecture"

#: of tritondse.ProcessState.base_pointer_register:3
#: tritondse.ProcessState.program_counter_register:3
#: tritondse.ProcessState.return_register:3
#: tritondse.ProcessState.stack_pointer_register:3
msgid ":py:obj:`tritondse.types.Register`"
msgstr ""

#: of tritondse.process_state.ProcessState.concretize_argument:1
msgid ""
"Concretize the given function parameter following the calling convention "
"of the architecture."
msgstr "Concrétise le ième paramètre de la fonction *(en respectant la convention d'appel)*"

#: of tritondse.process_state.ProcessState.concretize_argument:4
msgid "Argument index"
msgstr "Index de l'argument"

#: of tritondse.process_state.ProcessState.concretize_memory_bytes:1
msgid "Concretize the given range of memory with its current value."
msgstr "Concrétise l'interval mémoire donné avec ça valeur dans l'état concret"

#: of tritondse.process_state.ProcessState.concretize_memory_bytes:3
#: tritondse.process_state.ProcessState.concretize_memory_int:5
#: tritondse.process_state.ProcessState.get_format_arguments:5
#: tritondse.process_state.ProcessState.get_format_string:4
msgid "Address to concretize"
msgstr "Adresse à concrétiser"

#: of tritondse.process_state.ProcessState.concretize_memory_bytes:5
msgid "Size of the memory buffer to concretize"
msgstr "Taille du buffer mémoire à concrétiser"

#: of tritondse.process_state.ProcessState.concretize_memory_int:1
msgid ""
"Concretize the given memory with its current concrete value. **This "
"operation is sound** and allows restraining the memory value to its "
"constant value."
msgstr ""
"Concrétise la mémoire donnée avec ça valeur concrète courante. **Cette opération "
"est correcte et permet de restreindre l'emplacement mémoire avec ça valeur constante.**"

#: of tritondse.process_state.ProcessState.concretize_memory_int:7
msgid "Size of the integer to concretize"
msgstr "Taille de l'entier à concrétiser"

#: of tritondse.process_state.ProcessState.concretize_register:1
msgid ""
"Concretize the given register with its current concrete value. **This "
"operation is sound** as it will also add a path constraint to enforce "
"that the symbolic register value is equal to its concrete value."
msgstr ""
"Concrétise le registre donné avec ça valeur courante dans l'état concret. "
"**Cette opération est correcte, car ell va aussi ajouter une contrainte dans le prédicat de "
"chemin pour indiquer que la valeur symbolic est égale à la valeur concrète."

#: of tritondse.process_state.ProcessState.concretize_register:6
msgid "Register identifier (str or Register)"
msgstr "Identifiant de registre (ou string)"

#: ../../docstring of tritondse.ProcessState.cpu:1
msgid ""
"CpuState holding concrete values of registers *(initialized when calling "
"load_program)*"
msgstr ""
"CpuState conserve les valeurs concrètes des registres *(initialisé lors de l'appel à :meth:`load_program`"

#: of tritondse.ProcessState.current_instruction:1
msgid "The current instruction being executed. *(None if not set yet)*"
msgstr ""
"L'instruction courante exécutée *(None si pas positionner)*"

#: of tritondse.ProcessState.current_instruction:3
msgid ""
"Optional[`Instruction "
"<https://triton.quarkslab.com/documentation/doxygen/py_Instruction_page.html>`_]"
msgstr ""


#: of tritondse.process_state.ProcessState.get_argument_symbolic:1
msgid "Return the symbolic expression associated with the given ith parameter."
msgstr ""
"Renvoi l'expression symbolique associée au paramètre demandé."

#: of tritondse.process_state.ProcessState.get_argument_symbolic:3
msgid "Ith function parameter"
msgstr ""
"Le ième paramètre de fonction"

#: of tritondse.ProcessState.last_branch_constraint
#: tritondse.ProcessState.minus_one tritondse.arch.CpuState.base_pointer
#: tritondse.arch.CpuState.program_counter
#: tritondse.arch.CpuState.stack_pointer
#: tritondse.heap_allocator.HeapAllocator.alloc
#: tritondse.heap_allocator.HeapAllocator.is_ptr_allocated
#: tritondse.heap_allocator.HeapAllocator.is_ptr_freed
#: tritondse.process_state.ProcessState.get_argument_symbolic
#: tritondse.process_state.ProcessState.get_argument_value
#: tritondse.process_state.ProcessState.get_full_argument
#: tritondse.process_state.ProcessState.get_memory_string
#: tritondse.process_state.ProcessState.get_stack_value
#: tritondse.process_state.ProcessState.get_string_argument
#: tritondse.process_state.ProcessState.get_unique_file_id
#: tritondse.process_state.ProcessState.get_unique_thread_id
#: tritondse.process_state.ProcessState.initialize_context
#: tritondse.process_state.ProcessState.is_halt_instruction
#: tritondse.process_state.ProcessState.is_heap_ptr
#: tritondse.process_state.ProcessState.is_memory_symbolic
#: tritondse.process_state.ProcessState.is_stack_ptr
#: tritondse.process_state.ProcessState.is_valid_memory_mapping
#: tritondse.process_state.ProcessState.pop_stack_value
#: tritondse.process_state.ProcessState.process_instruction
#: tritondse.process_state.ProcessState.read_memory_bytes
#: tritondse.process_state.ProcessState.read_memory_int
#: tritondse.process_state.ProcessState.read_memory_ptr
#: tritondse.process_state.ProcessState.read_register
#: tritondse.process_state.ProcessState.read_symbolic_memory_byte
#: tritondse.process_state.ProcessState.read_symbolic_memory_bytes
#: tritondse.process_state.ProcessState.read_symbolic_memory_int
#: tritondse.process_state.ProcessState.read_symbolic_register
msgid "Returns"
msgstr "Renvoi"

#: of tritondse.process_state.ProcessState.get_argument_symbolic:4
msgid "Symbolic expression associated"
msgstr "Expression symbolique associée"

#: of tritondse.process_state.ProcessState.get_argument_symbolic:5
#: tritondse.process_state.ProcessState.read_symbolic_memory_byte:6
#: tritondse.process_state.ProcessState.read_symbolic_memory_bytes:9
#: tritondse.process_state.ProcessState.read_symbolic_memory_int:10
#: tritondse.process_state.ProcessState.read_symbolic_register:6
msgid ""
"`SymbolicExpression "
"<https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_"
msgstr ""

#: of tritondse.process_state.ProcessState.get_argument_value:1
msgid ""
"Get the integer value of parameters following the call convention. The "
"value originate either from a register or the stack depending on the ith "
"argument requested."
msgstr ""
"Récupère la valeur entière de l'argument en suivant la convention d'appel. "
"La valeur provient donc soit d'un registre soit de la pile."

#: of tritondse.process_state.ProcessState.get_argument_value:5
msgid "Ith argument of the function"
msgstr "ième argument de la fonction"

#: of tritondse.process_state.ProcessState.get_argument_value:7
msgid "integer value of the parameter"
msgstr "valeur entière du paramètre"

#: of tritondse.process_state.ProcessState.get_format_arguments:1
msgid ""
"Read the format string at ``fmt_addr``. For each format item which are "
"strings, dereference that associated string and replaces it in ``args``."
msgstr ""
"Lit la chaine de format à ``fmt_addr``. Pour chaque entrées qui sont des chaînes, "
"déréference la chaîne associée et la remplace dans ``args``."

#: of tritondse.process_state.ProcessState.get_format_arguments:7
msgid "Parameters associated with the format string"
msgstr ""
"Paramètres associés à la chaîne de format"

#: of tritondse.process_state.ProcessState.get_format_string:1
msgid ""
"Returns a formatted string in Python format from a format string located "
"in memory at ``addr``."
msgstr ""
"Renvoi une chaîne de format Python, à partir de la chaîne de format C située à ``addr``."

#: of tritondse.process_state.ProcessState.get_full_argument:1
msgid "Get both the concrete argument value along with its symbolic expression."
msgstr ""
"Récupère la valeur concrète et la valeur symbolique de l'argument sous forme de tuple."

#: of tritondse.process_state.ProcessState.get_full_argument:3
msgid "Tuple containing concrete value and symbolic expression"
msgstr ""
"Tuple contenant la valeur concrète et la valeur symbolique de l'argument"

#: of tritondse.process_state.ProcessState.get_memory_string:1
msgid "Read a string in process memory at the given address"
msgstr ""
"Lit une chaîne de caractère en mémoire à l'adresse donnée"

#: of tritondse.process_state.ProcessState.get_memory_string:3
msgid ""
"The memory read is unbounded. Thus the memory is iterated up until "
"finding a 0x0."
msgstr ""
"La lecture est non-bornée. La mémoire est donc lues jusqu'à trouver un 0."

#: of tritondse.process_state.ProcessState.get_memory_string:6
msgid "the string read in memory"
msgstr ""
"la string lues en mémoire"

#: of tritondse.process_state.ProcessState.get_stack_value:1
msgid "Returns the value at the ith position further in the stack"
msgstr ""
"Renvoi la valeur à la ième position plus loin dans la pile"

#: of tritondse.process_state.ProcessState.get_stack_value:3
msgid "The index position from the top of the stack"
msgstr ""
"l'index de la position depuis le haut de la pile"

#: of tritondse.process_state.ProcessState.get_stack_value:5
msgid "the value got"
msgstr ""
"La valeur obtenue"

#: of tritondse.process_state.ProcessState.get_string_argument:1
msgid ""
"Read a string for which address is a function parameter. The function "
"first get the argument value, and then dereference the string located at "
"that address."
msgstr ""
"Lit une chaîne de caractères donnée en paramètre d'une fonction. Cette fonction "
"est un sucre syntaxique pour ``get_argument_value`` et ``read_memory_string``."

#: of tritondse.process_state.ProcessState.get_string_argument:5
msgid "argument index"
msgstr ""
"index de l'argument"

#: of tritondse.process_state.ProcessState.get_string_argument:7
msgid "memory string"
msgstr ""
"string en mémoire"

#: of tritondse.process_state.ProcessState.get_unique_file_id:1
msgid ""
"Return a new unique file descriptor. Used by routines yielding new file "
"descriptors."
msgstr ""
"Renvoi un nouveau descripteur de fichier unique. Utilisé par les routines retournant de nouveaux descripteurs. "

#: of tritondse.process_state.ProcessState.get_unique_file_id:4
msgid "new file descriptor identifier"
msgstr ""
"nouvel identifiant de descripteur de fichier"

#: of tritondse.process_state.ProcessState.get_unique_thread_id:1
msgid ""
"Return a new unique thread id. Used by thread related functions when "
"spawning a new thread."
msgstr ""
"Renvoi un nouvel identifiant unique de thread. *(utilisé par les fonctions créant de nouveaux threads)*"

#: of tritondse.process_state.ProcessState.get_unique_thread_id:4
msgid "new thread identifier"
msgstr ""
"nouvel identifiant de thread"

#: of tritondse.process_state.ProcessState.initialize_context:1
msgid "Initialize the context with the given architecture"
msgstr ""
"Initialise le contexte avec l'architecture donnée"

#: of tritondse.process_state.ProcessState.initialize_context:3
#: tritondse.process_state.ProcessState.write_memory_int:11
msgid "Todo"
msgstr ""

#: of tritondse.process_state.ProcessState.initialize_context:3
msgid "Protecting that function"
msgstr "Protéger cette fonction"

#: of tritondse.process_state.ProcessState.initialize_context:5
msgid "The architecture to initialize"
msgstr "L'architecture à initialiser"

#: of tritondse.process_state.ProcessState.initialize_context:7
msgid "None"
msgstr ""

#: of tritondse.process_state.ProcessState.is_halt_instruction:1
msgid ""
"Check if the the current instruction is corresponding to an 'halt' "
"instruction in the target architecture."
msgstr ""
"Vérifie si l'instruction courante correspond bien à un 'halt' dans l'architecture cible."

#: of tritondse.process_state.ProcessState.is_halt_instruction:4
msgid "Return true if on halt instruction architecture independent"
msgstr "Renvoi vrai si l'instruction une instruction d'arrêt 'halt'"

#: of tritondse.process_state.ProcessState.is_heap_ptr:1
msgid "Check whether a given address is pointing in the heap area."
msgstr "Vérifie si l'adresse donnée pointe sur le tas."

#: of tritondse.heap_allocator.HeapAllocator.is_ptr_allocated:3
#: tritondse.heap_allocator.HeapAllocator.is_ptr_freed:3
#: tritondse.process_state.ProcessState.is_heap_ptr:3
#: tritondse.process_state.ProcessState.is_stack_ptr:3
msgid "Address to check"
msgstr "Adresse à vérifier"

#: of tritondse.process_state.ProcessState.is_heap_ptr:5
msgid "True if pointer points to the heap area *(allocated or not)*."
msgstr "Vrai si le pointeur, adresse le tas *(que l'adresse soit allouée ou non)*"

#: of tritondse.process_state.ProcessState.is_memory_symbolic:1
msgid ""
"Iterate the symbolic memory and returns whether or not at least one byte "
"of the buffer is symbolic"
msgstr "Itère l'interval mémoire donné et renvoi vrai si au moins un octet est symbolique."

#: of tritondse.process_state.ProcessState.is_memory_symbolic:4
#: tritondse.process_state.ProcessState.read_symbolic_memory_byte:3
#: tritondse.process_state.ProcessState.read_symbolic_memory_bytes:4
#: tritondse.process_state.ProcessState.read_symbolic_memory_int:4
#: tritondse.process_state.ProcessState.write_symbolic_memory_byte:7
#: tritondse.process_state.ProcessState.write_symbolic_memory_int:4
msgid "Memory address"
msgstr "Adresse mémoire"

#: of tritondse.process_state.ProcessState.is_memory_symbolic:6
msgid "size of the memory range to check"
msgstr "taille de l'interval mémoire à vérifier"

#: of tritondse.process_state.ProcessState.is_memory_symbolic:8
msgid "True if at least one byte of the memory is symbolic, false otherwise"
msgstr "Vrai si au moins un octet de mémoire est symbolique, Faux sinon"

#: of tritondse.process_state.ProcessState.is_path_predicate_updated:1
msgid "Return whether or not the path predicate has been updated"
msgstr "Après exécution d'une instruction renvoi si le prédicat de chemin a été mis à jour ou non"

#: of tritondse.process_state.ProcessState.is_stack_ptr:1
msgid "Check whether a given address is pointing in stack area."
msgstr "Vérifie si l'adresse mémoire pointe sur la pile."

#: of tritondse.process_state.ProcessState.is_stack_ptr:5
msgid "True if pointer points to the stack area (allocated or not)."
msgstr "Vrai si le pointeur adresse une zone de la pile"

#: of tritondse.process_state.ProcessState.is_valid_memory_mapping:1
msgid "Check if a given address is mapped into memory maps"
msgstr "Vérifie si l'adresse donnée est mappée en mémoire *(contenu dans les memory maps)*"

#: of tritondse.process_state.ProcessState.is_valid_memory_mapping:3
msgid "The pointer to check"
msgstr "Le pointeur à vérifier"

#: of tritondse.process_state.ProcessState.is_valid_memory_mapping:5
msgid "A padding to add at the end of segment if necessary"
msgstr "Un padding à ajouter à la fin d'un segment (si nécessaire)"

#: of tritondse.process_state.ProcessState.is_valid_memory_mapping:7
msgid "True if ptr is mapped otherwise returns False"
msgstr "Vrai si ``ptr`` est mappé, faux sinon"

#: of tritondse.ProcessState.last_branch_constraint:1
msgid ""
"Return the last PathConstraint object added in the path predicate. Should"
" be called after :py:meth:`is_path_predicate_updated`."
msgstr ""
"Renvoi le dernier objet ``PathConstraint`` ajouté au prédicat de chemin. Doit être "
"appelé après :py:meth:`is_path_predicate_updated`."

#: of tritondse.ProcessState.last_branch_constraint
#: tritondse.heap_allocator.HeapAllocator.alloc
#: tritondse.heap_allocator.HeapAllocator.free
#: tritondse.process_state.ProcessState.read_symbolic_memory_int
#: tritondse.process_state.ProcessState.write_symbolic_memory_int
msgid "Raises"
msgstr "Exception"

#: of tritondse.ProcessState.last_branch_constraint:4
msgid "if the path predicate is empty"
msgstr "si le prédicat de chemin est vide"

#: of tritondse.ProcessState.last_branch_constraint:5
msgid "the path constraint object as returned by Triton"
msgstr "l'entrée du prédicat de chemin tel que renvoyé par Triton"

#: of tritondse.ProcessState.last_branch_constraint:6
msgid ""
"`PathConstraint "
"<https://triton.quarkslab.com/documentation/doxygen/py_PathConstraint_page.html>`_"
msgstr ""

#: of tritondse.process_state.ProcessState.load_program:1
msgid ""
"Load the given program in the process state memory. It sets the program "
"counter to the entry point and load all segments in the triton context."
msgstr ""
"Charge le programme donnée dans la mémoire du processus. Il configure le pointeur "
"d'instruction sur le point d'entré, et charge tous les segments dans le contexte Triton."

#: of tritondse.process_state.ProcessState.load_program:5
msgid "Program to load in the process memory"
msgstr ""
"Programme à charger dans la mémoire du processus"

#: of tritondse.process_state.ProcessState.load_program:7
msgid "Base address where to load the program (if PIE)"
msgstr "adresse de base où charger le programme *(si PIE)*"

#: of tritondse.ProcessState.minus_one:1
msgid "Value -1 according to the architecture size (32 or 64 bits)"
msgstr "Valeur -1 en fonction de la taille d'un entier dans l'architecture cible (32 ou 64 bits)"

#: of tritondse.ProcessState.minus_one:3
msgid "-1 as an unsigned Python integer"
msgstr "-1 comme entier non-signé Python"

#: of tritondse.process_state.ProcessState.pop_stack_value:1
msgid ""
"Pop a stack value, and the re-increment the stack pointer value. This "
"operation is fully concrete."
msgstr ""
"Pop une valeur concrète de la pile. *(ce qui implique l'incrémentation du pointeur de pile)*. "
"Cette opération est complètement concrète."

#: of tritondse.process_state.ProcessState.pop_stack_value:4
msgid "int"
msgstr "entier"

#: of tritondse.process_state.ProcessState.process_instruction:1
msgid "Process the given triton instruction on this process state."
msgstr ""
"Traite l'instruction donnée en argument *(et fait tous les mises à jour sur l'état concret et symbolique)*"

#: of tritondse.process_state.ProcessState.process_instruction:3
msgid "Triton Instruction object"
msgstr "Object Instruction Triton"

#: of tritondse.process_state.ProcessState.process_instruction:5
msgid "True if the processing of the instruction succeeded (False otherwise)"
msgstr "Vrai si le traitement de l'instruction réussi (faux sinon)"

#: of tritondse.ProcessState.program_counter_register:1
msgid "Return the appropriate pc register according to the arch."
msgstr ""
"Renvoi le registre de pointeur d'instruction (en fonction de l'architecture)"

#: of tritondse.ProcessState.ptr_bit_size:1
msgid "Size of a pointer in bits"
msgstr ""
"Taille d'un pointeur en bits"

#: of tritondse.ProcessState.ptr_bit_size:3
msgid ":py:obj:`tritondse.types.BitSize`"
msgstr ""

#: of tritondse.ProcessState.ptr_size:1
msgid "Size of a pointer in bytes"
msgstr ""
"Taille d'un pointeur en octets"

#: of tritondse.ProcessState.ptr_size:3
msgid ":py:obj:`tritondse.types.ByteSize`"
msgstr ""

#: of tritondse.process_state.ProcessState.push_constraint:1
msgid "Thin wrapper on the triton context underneath to add a path constraint."
msgstr ""
"Léger wrapper pour l'ajout d'une contrainte dans le prédicat de chemin du context triton."

#: of tritondse.process_state.ProcessState.push_constraint:3
msgid "Constraint expression to add"
msgstr ""
"Expression de la contrainte à ajouter"

#: of tritondse.process_state.ProcessState.push_stack_value:1
msgid "Push a stack value. It then decreement the stack pointer value."
msgstr ""
"Pousse la valeur sur la pile. *(ce qui décrémente le pointeur de pile)*."

#: of tritondse.process_state.ProcessState.push_stack_value:3
msgid "The value to push"
msgstr "La valeur à pousser"

#: of tritondse.process_state.ProcessState.read_memory_bytes:1
msgid ""
"Read in the process memory ``size`` amount of bytes at ``addr``. Data "
"read is returned as bytes."
msgstr ""
"Lis ``size`` octets dans la mémoire du processus à l'adresse ``addr``. Les données sont renvoyées sous forme d'octets."

#: of tritondse.process_state.ProcessState.read_memory_bytes:4
#: tritondse.process_state.ProcessState.read_memory_int:3
#: tritondse.process_state.ProcessState.read_memory_ptr:3
#: tritondse.process_state.ProcessState.write_memory_byte:4
#: tritondse.process_state.ProcessState.write_memory_bytes:4
#: tritondse.process_state.ProcessState.write_memory_int:4
msgid "Address at which to read data"
msgstr "adresse à laquelle lire les données"

#: of tritondse.process_state.ProcessState.read_memory_bytes:6
#: tritondse.process_state.ProcessState.read_memory_int:5
#: tritondse.process_state.ProcessState.write_memory_int:6
msgid "Number of bytes to read"
msgstr ""
"Nombre d'octets à lire"

#: of tritondse.process_state.ProcessState.read_memory_bytes:8
msgid "Data read"
msgstr ""
"Données lues"

#: of tritondse.process_state.ProcessState.read_memory_int:1
msgid ""
"Read in the process memory a **little-endian** integer of the ``size`` at"
" ``addr``."
msgstr ""
"Lis un entier en **little-endian** de la taille ``size`` à l'adresse ``addr``."

#: of tritondse.process_state.ProcessState.read_memory_int:7
#: tritondse.process_state.ProcessState.read_memory_ptr:5
msgid "Integer value read"
msgstr ""
"Valeur entière lue"

#: of tritondse.process_state.ProcessState.read_memory_ptr:1
msgid ""
"Read in the process memory a little-endian integer of size "
":py:attr:`tritondse.ProcessState.ptr_size`"
msgstr ""

#: of tritondse.process_state.ProcessState.read_register:1
#: tritondse.process_state.ProcessState.write_register:1
msgid "Read the current concrete value of the given register."
msgstr ""
"Lis la valeur d'un registre donné"

#: of tritondse.process_state.ProcessState.read_register:3
#: tritondse.process_state.ProcessState.write_register:3
msgid "string of the register or Register object"
msgstr ""
"identifiant du registre (ou nom)"

#: of tritondse.process_state.ProcessState.read_register:5
msgid "Integer value"
msgstr ""
"valeur entière"

#: of tritondse.process_state.ProcessState.read_symbolic_memory_byte:1
msgid ""
"Thin wrapper to retrieve the symbolic expression of a single bytes in "
"memory."
msgstr ""
"Léger 'wrapper' pour récupérer l'expression symbolique d'un octet en mémoire."

#: of tritondse.process_state.ProcessState.read_symbolic_memory_byte:5
#: tritondse.process_state.ProcessState.read_symbolic_memory_bytes:8
#: tritondse.process_state.ProcessState.read_symbolic_memory_int:9
msgid "Symbolic Expression associated with the memory"
msgstr "Expression symbolique associée à la mémoire"

#: of tritondse.process_state.ProcessState.read_symbolic_memory_bytes:1
#: tritondse.process_state.ProcessState.read_symbolic_memory_int:1
msgid ""
"Return a new Symbolic Expression representing the whole memory range "
"given in parameter. That function should not be used on big memory "
"chunks."
msgstr "Renvoi une nouvelle expression symbolique représentant l'intervale mémoire donné. "
"Cette fonction ne doit pas être utilisée sur de gros intervales mémoire. "

#: of tritondse.process_state.ProcessState.read_symbolic_memory_bytes:6
#: tritondse.process_state.ProcessState.read_symbolic_memory_int:6
#: tritondse.process_state.ProcessState.write_symbolic_memory_int:6
msgid "memory size in bytes"
msgstr "taille mémoire en octets"

#: of tritondse.process_state.ProcessState.read_symbolic_memory_int:8
msgid "If the size if not aligned"
msgstr "si la taille n'est pas alignée"

#: of tritondse.process_state.ProcessState.read_symbolic_register:1
msgid "Get the symbolic expression associated with the given register."
msgstr "Récupère l'expression symbolique du registre"

#: of tritondse.process_state.ProcessState.read_symbolic_register:3
msgid "register string, or Register object"
msgstr "objet Registre ou nom sous forme de string"

#: of tritondse.process_state.ProcessState.read_symbolic_register:5
msgid "SymbolicExpression of the register as returned by Triton"
msgstr "SymbolicExpression du registre tel que renvoyé par Triton"

#: of tritondse.process_state.ProcessState.register_triton_callback:1
msgid ""
"Register the given ``callback`` as triton callback to hook "
"memory/registers read/writes."
msgstr "Enregistre ``callback`` pour intercepter une lecture/écriture, mémoire/registre."

#: of tritondse.process_state.ProcessState.register_triton_callback:4
msgid "Callback enum type as defined by Triton"
msgstr "Type de callback tel que défini par Triton"

#: of tritondse.process_state.ProcessState.register_triton_callback:6
msgid "routines to call on the given event"
msgstr "fonction à appeler au déclenchement de l'évenement"

#: of tritondse.ProcessState.registers:1
msgid ""
"All registers according to the current architecture defined. The object "
"returned is the TritonContext.register object."
msgstr ""
"Tous les registres de l'architecture courante. C'est l'objet Triton tel qu'obtenu avec "
"TritonContext.register."

#: of tritondse.ProcessState.registers:4
msgid ":py:obj:`tritondse.types.Registers`"
msgstr ""

#: of tritondse.ProcessState.return_register:1
msgid "Return the appropriate return register according to the arch"
msgstr ""
"Renvoi le registre de 'retour' tel que défini par l'architecture"

#: of tritondse.ProcessState.stack_pointer_register:1
msgid "Return the appropriate stack pointer register according to the arch."
msgstr ""
"Renvoie l'identifiant du registre pointeur de pile tel que définit dans la pile."

#: of tritondse.process_state.ProcessState.write_memory_byte:1
msgid ""
"Write a single byte in the process memory. Can be provided as a byte or "
"integer. Integer value should fit in a byte."
msgstr ""
"Écris un seul octet dans la mémoire du processus. Peut-être fournis comme un byte "
"ou un entier Python (qui doit tenir dans un octet)."

#: of tritondse.process_state.ProcessState.write_memory_byte:6
#: tritondse.process_state.ProcessState.write_memory_bytes:6
msgid "bytes data to write"
msgstr "octets à écrire"

#: of tritondse.process_state.ProcessState.write_memory_bytes:1
msgid ""
"Write multiple bytes in the process memory. Size is automatically deduced"
" with data size."
msgstr ""
"Écris plusieurs octets dans la mémoire du processus. La taille est automatiquement déduite "
"à partir de la taille des données."

#: of tritondse.process_state.ProcessState.write_memory_int:1
msgid ""
"Write in the process memory the given integer value of the given size at "
"a specific address."
msgstr ""
"Écris une valeur entière de la taille donnée en mémoire."

#: of tritondse.process_state.ProcessState.write_memory_int:8
msgid "data to write represented as an integer"
msgstr ""
"donnée à écrire sous forme d'entier"

#: of tritondse.process_state.ProcessState.write_memory_int:11
msgid "Adding a parameter to specify endianess if needed"
msgstr ""
"Ajouter un paramètre pour spécifier l'endianness si besoin"

#: of tritondse.process_state.ProcessState.write_memory_ptr:1
msgid ""
"Similar to :py:meth:`write_memory_int` but the size is automatically "
"adjusted to be ``ptr_size``."
msgstr ""
"Similaire à :py:meth:`write_memory_int` mais la taille est automatiquement ajustée pour être celle d'un pointeur "
"(``ptr_size``)."

#: of tritondse.process_state.ProcessState.write_memory_ptr:4
msgid "address where to write data"
msgstr "adresse où écrire les données"

#: of tritondse.process_state.ProcessState.write_memory_ptr:6
msgid "pointer value to write"
msgstr "valeur du pointeur à écrire"

#: of tritondse.process_state.ProcessState.write_register:5
msgid "integer value to assign in the register"
msgstr ""
"valeur à mettre dans le registre"

#: of tritondse.process_state.ProcessState.write_symbolic_memory_byte:1
msgid "Set a single bytes symbolic at the given address"
msgstr ""
"Ecris un seul octet en mémoire à l'adresse donnée"

#: of tritondse.process_state.ProcessState.write_symbolic_memory_byte:9
msgid ""
"byte expression to assign (`AstNode "
"<https://triton.quarkslab.com/documentation/doxygen/py_AstNode_page.html>`_"
" or `SymbolicExpression "
"<https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_)"
msgstr ""
"expression de l'octet à écrire (`AstNode "
"<https://triton.quarkslab.com/documentation/doxygen/py_AstNode_page.html>`_"
" ou `SymbolicExpression "
"<https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_)"

#: of tritondse.process_state.ProcessState.write_symbolic_memory_int:1
msgid ""
"Assign the given symbolic expression representing an integer to the given"
" address. That function should not be used on big memory chunks."
msgstr ""
"Assign l'expression symbolique d'un entier à l'adresse donnée en mémoire. "
"Cette fonction ne doit pas être utilisée sur de gros intervales mémoire."

#: of tritondse.process_state.ProcessState.write_symbolic_memory_int:8
#: tritondse.process_state.ProcessState.write_symbolic_register:6
msgid ""
"expression to assign (`AstNode "
"<https://triton.quarkslab.com/documentation/doxygen/py_AstNode_page.html>`_"
" or `SymbolicExpression "
"<https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_)"
msgstr ""
"expression à assigner (`AstNode "
"<https://triton.quarkslab.com/documentation/doxygen/py_AstNode_page.html>`_"
" ou `SymbolicExpression "
"<https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_)"

#: of tritondse.process_state.ProcessState.write_symbolic_memory_int:10
msgid "if the size if not aligned"
msgstr "si la taille n'est pas alignée"

#: of tritondse.process_state.ProcessState.write_symbolic_register:1
msgid ""
"Assign the given symbolic expression to the register. The given "
"expression can either be a SMT AST node or directly an Expression "
"(SymbolicExpression)."
msgstr ""
"Assigne l'expression symbolique au registre."

#: of tritondse.process_state.ProcessState.write_symbolic_register:4
msgid "register identifier (str or Register)"
msgstr ""
"Identifiant du registre ou nom (str)."

#: of tritondse.process_state.ProcessState.write_symbolic_register:8
msgid "Comment to add on the symbolic expression created"
msgstr ""
"Commentaire à ajouter à l'expression symbolique créée"

#: ../../api/process.rst:12
msgid "CpuState"
msgstr ""

#: of tritondse.arch.CpuState:1
msgid ""
"Thin wrapper on a TritonContext, to allow accessing and modifying "
"registers in a Pythonic way. It also abstract base, stack, and program "
"counter for architecture agnostic operations. This class performs all "
"actions on the TritonContext, and does not hold any information. It is "
"just acting as a proxy"
msgstr ""
"Wrapper autour de TritonContext permettant d'accéder et de modifier très "
"facilement les valeurs de registre de manière 'Pythonic'. Elle abstrait "
"aussi le pointeur de base, pile et instruction pour effectuer les opérations "
"agnostiques de l'architecture. Cette classe effectue toutes les opérations "
"sur le TritonContext directement et ne conserve aucunes valeur interne. "
"*(Il agit seulement comme proxy)*"

#: of tritondse.arch.CpuState:8
msgid ""
"This class adds dynamically attributes corresponding to register. Thus "
"attributes will vary from an architecture to the other."
msgstr ""
"Cette classe ajoute dynamiquement les attributs correspondant à tous les registres. "
"Ainsi, les attributs varient d'une architecture à l'autre."

#: of tritondse.arch.CpuState:18
msgid "No data is stored, all operations are performed on the TritonContext:"
msgstr ""
"Aucune données ne sont stockées, toutes les opérations sont effectuées sur le TritonContext."

#: of tritondse.arch.CpuState:27
msgid ""
"The user is not meant to instanciate it manually, and must use it through"
" :py:obj:`ProcessState`."
msgstr ""
"L'utilisateur n'est pas censé instancié l'objet manuellement. Il doit être utilisé via "
" :py:obj:`ProcessState`."

#: of tritondse.arch.CpuState.base_pointer:1
msgid "The value of the base pointer register"
msgstr "La valeur du 'base pointer'"

#: of tritondse.arch.CpuState.program_counter:1
msgid "The value of the program counter (RIP for x86, PC for ARM ..)"
msgstr "La valeur du pointeur d'instruction (RIP pour x86, PC pour ARM..)"

#: of tritondse.arch.CpuState.stack_pointer:1
msgid "The value of the stack pointer register"
msgstr "La valeur du pointeur de pile"

#: ../../api/process.rst:22
msgid "HeapAllocator"
msgstr ""

#: of tritondse.heap_allocator.HeapAllocator:1
msgid ""
"Custom tiny heap allocator. Used by built-ins routines like malloc/free. "
"This allocation manager also provides an API enabling checking whether a "
"pointer is allocated freed etc."
msgstr ""
"Petit allocateur sur le tas. Utilisé par les fonctions 'built-in' comme malloc ou free. "
"Ce manager fournis aussi les APIs pour vérifier si un pointeur est alloué ou libéré."

#: of tritondse.heap_allocator.HeapAllocator:5
msgid ""
"This allocator is very simple and does not perform any coalescing of "
"freed memory areas. Thus it may not correctly model the behavior of libc "
"allocator."
msgstr ""
"Cet allocateur est très simple et n'effectue aucune unification des 'chunks' libérés. "
"Il ne modélise pas de manière précise le comportement de la libc."

#: of tritondse.heap_allocator.HeapAllocator:9
msgid "Class constructor. Takes heap bounds as parameter."
msgstr "Constructeur. Prend le tas comme paramètre."

#: of tritondse.heap_allocator.HeapAllocator:11
msgid "Where the heap area can start"
msgstr "Où le tas démarre"

#: of tritondse.heap_allocator.HeapAllocator:13
msgid "Where the heap area must be end"
msgstr "Où le tas termine"

#: of tritondse.heap_allocator.HeapAllocator.alloc:1
msgid "Performs an allocation of the given byte size."
msgstr "Effectue une allocation de la taille donnée"

#: of tritondse.heap_allocator.HeapAllocator.alloc:3
msgid "Byte size to allocate"
msgstr "taille en octets à allouer"

#: of tritondse.heap_allocator.HeapAllocator.alloc:5
msgid "if not memory is available"
msgstr "si aucune mémoire n'est pas disponible"

#: of tritondse.heap_allocator.HeapAllocator.alloc:6
msgid "The pointer address allocated"
msgstr "L'adresse du pointeur alloué"

#: of tritondse.heap_allocator.HeapAllocator.alloc:7
msgid ":py:obj:`tritondse.types.Addr`"
msgstr ""

#: ../../docstring of tritondse.heap_allocator.HeapAllocator.curr_offset:1
msgid "Heap current offset address"
msgstr "Addresse courante du tas"

#: ../../docstring of tritondse.heap_allocator.HeapAllocator.end:1
msgid "Ending address of the heap"
msgstr "Adresse de fin du tas"

#: of tritondse.heap_allocator.HeapAllocator.free:1
msgid "Free the given memory chunk."
msgstr "Libère le pointeur mémoire donné"

#: of tritondse.heap_allocator.HeapAllocator.free:3
msgid "Address to free"
msgstr "Adresse à libérer"

#: of tritondse.heap_allocator.HeapAllocator.free:5
msgid "if the pointer has already been freed or if it has never been allocated"
msgstr ""

#: of tritondse.heap_allocator.HeapAllocator.is_ptr_allocated:1
msgid "Check whether a given address has been allocated"
msgstr "Vérifie si l'adresse à été allouée ou non"

#: of tritondse.heap_allocator.HeapAllocator.is_ptr_allocated:5
msgid "True if pointer points to an allocated memory region"
msgstr "Vrai si le pointeur, pointe sur une adresse allouée"

#: of tritondse.heap_allocator.HeapAllocator.is_ptr_freed:1
msgid "Check whether a given pointer has recently been freed."
msgstr "Vérifie si le pointeur a été récemment libéré ou non"

#: of tritondse.heap_allocator.HeapAllocator.is_ptr_freed:5
msgid "True if pointer has been freed, False otherwise"
msgstr "Vrai si le pointeur à été libéré, faux sinon"

#: ../../docstring of tritondse.heap_allocator.HeapAllocator.start:1
msgid "Starting address of the heap"
msgstr "Adresse de début du tas"

#: of tritondse.heap_allocator.AllocatorException:1
msgid ""
"Class used to represent an heap allocator exception. This exception can "
"be raised in the following conditions:"
msgstr ""
"Classe utilisée pour représenter une exception liée au tas. Cette exception peut "
"être levée dans les conditions suivantes:"

#: of tritondse.heap_allocator.AllocatorException:4
msgid "trying to allocate data which overflow heap size"
msgstr ""
"en essayant d'allouer des données qui débordent du tas"

#: of tritondse.heap_allocator.AllocatorException:5
msgid "trying to free a pointer already freed"
msgstr ""
"en essayant de libérer un pointeur déjà libéré"

#: of tritondse.heap_allocator.AllocatorException:6
msgid "trying to free a non-allocated pointer"
msgstr ""
"en essayant de libérer un pointeur non-alloué"

#: ../../api/process.rst:38
msgid "ThreadContext"
msgstr ""

#: of tritondse.thread_context.ThreadContext:1
msgid "Bases: :class:`object`"
msgstr ""

#: of tritondse.thread_context.ThreadContext:1
msgid ""
"Thread data structure holding all information related to it. Purposely "
"used to save registers and to restore them in a TritonContext."
msgstr ""
"Structure représentant un thread et contenant différentes informations associées. "
"Utilisé pour sauvegarder et restorer les valeurs de registres dans un contexte triton."

#: of tritondse.thread_context.ThreadContext:5
msgid "thread id"
msgstr ""
"identifiant du thread"

#: of tritondse.thread_context.ThreadContext.restore:1
msgid "Restore a thread state in the given TritonContext"
msgstr ""
"Restaure l'état du thread dans le contexte triton donné"

#: of tritondse.thread_context.ThreadContext.restore:3
msgid "context in which to restor the current thread state"
msgstr ""
"Contexte dans lequel restaurer l'état du thread"

#: of tritondse.thread_context.ThreadContext.save:1
msgid ""
"Save the current thread state from the current execution. That implies "
"keeping a reference on symbolic and concrete registers."
msgstr ""
"Sauvegarde l'état courant dans l'état du thread. Cela implique de garder une "
"référence sur les registres concrets et symboliques."

#: of tritondse.thread_context.ThreadContext.save:5
msgid "current TritonContext to save"
msgstr "TritonContext courant à sauvegarder"
