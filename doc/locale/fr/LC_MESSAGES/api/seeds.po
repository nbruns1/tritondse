# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Quarkslab
# This file is distributed under the same license as the tritondse package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tritondse \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-21 22:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../api/seeds.rst:2
msgid "Seed"
msgstr ""

#: of tritondse.seed.Seed:1
msgid "Bases: :class:`object`"
msgstr ""

#: of tritondse.seed.Seed:1
msgid ""
"Seed input. Holds the bytes buffer of the content a status after "
"execution but also some metadata of code portions it is meant to cover."
msgstr ""
"Graine d'entrée. Contient les octets du contenu, le statut après exécution mais aussi "
"quelques méta données indiquant les portions de code à couvrir."

#: of tritondse.seed.Seed tritondse.seed.Seed.__init__
#: tritondse.seed.Seed.from_file
msgid "Parameters"
msgstr "Paramètres"

#: of tritondse.seed.Seed:5 tritondse.seed.Seed.__init__:1
msgid ""
"content of the input. By default is b\"\" *(and is thus considered as a "
"bootstrap seed)*"
msgstr "contenu de l'entrée. Par défaut c'est b\"\" *(considéré dans ce cas comme graine de démarrage)*"

#: of tritondse.seed.Seed:7 tritondse.seed.Seed.__init__:3
msgid "status of the seed if already known"
msgstr "statut de la graine si déjà connue"

#: of tritondse.seed.Seed.__eq__:1
msgid "Equality check based on content."
msgstr "Vérification d'égalité basée sur le contenu de la graine"

#: of tritondse.seed.Seed.__eq__ tritondse.seed.Seed.filename
#: tritondse.seed.Seed.from_file tritondse.seed.Seed.is_bootstrap_seed
#: tritondse.seed.Seed.is_fresh
msgid "Returns"
msgstr "Renvoie"

#: of tritondse.seed.Seed.__eq__:3
msgid "true if content of both seeds are equal"
msgstr "vrai si le contenu des deux graines est égale"

#: of tritondse.seed.Seed.__hash__:1
msgid ""
"Seed hash function overriden to base itself on content. That enable "
"storing seed in dictionnaries directly based on their content to "
"discriminate them."
msgstr ""
"Fonction de hash réécrite pour ce baser sur le contenu de la graine. Permet "
"l'utilisation de graines comme clés de dictionnaire *(discriminée sur le contenu)* "

#: of tritondse.seed.Seed.__hash__ tritondse.seed.Seed.__len__
#: tritondse.seed.Seed.filename tritondse.seed.Seed.from_file
#: tritondse.seed.Seed.get_hash tritondse.seed.Seed.get_size
#: tritondse.seed.Seed.status
msgid "Return type"
msgstr "Type de retour"

#: of tritondse.seed.Seed.__len__:1
msgid "Size of the content of the seed."
msgstr "Taille du contenu de la graine."

#: of tritondse.seed.Seed.__weakref__:1
msgid "list of weak references to the object (if defined)"
msgstr "liste de 'weak' références vers l'objet *(si défini)*"

#: ../../docstring of tritondse.seed.Seed.content:1
msgid "content of the seed"
msgstr "contenu de la graine"

#: of tritondse.seed.Seed.filename:1
msgid ""
"Standardized filename based on hash and size. That does not mean the file"
" exists or anything."
msgstr ""
"Nom de fichier standardisé basé sur son hash et son contenu. *(ça n'implique pas que le fichier existe)* "

#: of tritondse.seed.Seed.filename:4
msgid "formatted intended filename of the seed"
msgstr "nom de fichier formaté"

#: of tritondse.seed.Seed.from_file:1
msgid ""
"Read a seed from a file. The status can be optionally given as it cannot be "
"determined from the file."
msgstr ""
"Lit la graine dans un fichier. Le statut peut optionnellement être donné car il ne peut pas "
"être déterminé à partir du fichier."

#: of tritondse.seed.Seed.from_file:4
msgid "seed path"
msgstr "chemin de la graine"

#: of tritondse.seed.Seed.from_file:6
msgid "status of the seed if any, otherwise :py:obj:`SeedStatus.NEW`"
msgstr "statut de la graine, s'il n'est pas positionné elle est: :py:obj:`SeedStatus.NEW`"

#: of tritondse.seed.Seed.from_file:9
msgid "fresh seed instance"
msgstr "nouvelle instance de graine"

#: of tritondse.seed.Seed.get_hash:1
msgid "MD5 hash of the seed content"
msgstr "Hash MD5 du contenu de la graine"

#: of tritondse.seed.Seed.get_size:1
msgid "Size of the seed content in bytes"
msgstr "Taille du contenu de la graine en octets"

#: of tritondse.seed.Seed.is_bootstrap_seed:1
msgid ""
"A bootstrap seed is an empty seed (b\"\"). It will received a specific "
"processing in the engine as its size will be automatically adapted to the"
" size read (in stdin for instance)"
msgstr ""
"Une graine de démarrage est une graine vide (b\"\"). Elle sera traitée différemment "
"car elle sera initialisée avec des zéros et la taille sera adaptée à la taille maximum lues (dans stdin par exemple)."

#: of tritondse.seed.Seed.is_bootstrap_seed:5
msgid "true if the seed is a bootstrap seed"
msgstr ""
"vrai si la graine est une graine de démarrage"

#: of tritondse.seed.Seed.is_fresh:1
msgid ""
"A fresh seed is never been executed. Its is recognizable as it does not "
"contain any coverage objectives."
msgstr ""
"Une graine est fraîche si elle n'a jamais été exécutée. Elle est reconnaissable car elle ne contient "
"aucun objectifs de couverture."

#: of tritondse.seed.Seed.is_fresh:4
msgid "True if the seed has never been executed"
msgstr "vrai si la graine n'a jamais été exécutée"

#: of tritondse.seed.Seed.status:1
msgid "Status of the seed."
msgstr "Statut de la graine"

#: of tritondse.seed.SeedStatus:1
msgid "Bases: :class:`enum.Enum`"
msgstr ""

#: of tritondse.seed.SeedStatus:1
msgid ""
"Seed status enum. Enables giving a status to a seed during its execution."
" At the end of a :py:obj:`SymbolicExecutor` run one of these status must "
"have set to the seed."
msgstr ""
"Enum qui représente le statut d'une graine. Le statut est assigné au cours "
"de son exécution. À la fin d'une exécution de :py:obj:`SymbolicExecutor` un statut "
"doit avoir été assigné à la graine."
